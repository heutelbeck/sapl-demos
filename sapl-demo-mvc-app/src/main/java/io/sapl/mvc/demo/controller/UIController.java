/*
 * Copyright Â© 2019-2021 Dominic Heutelbeck (dominic@heutelbeck.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sapl.mvc.demo.controller;

import java.io.IOException;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.sapl.api.pdp.AuthorizationSubscription;
import io.sapl.api.pdp.Decision;
import io.sapl.api.pdp.PolicyDecisionPoint;
import io.sapl.mvc.demo.domain.Patient;
import io.sapl.mvc.demo.domain.PatientRepository;
import io.sapl.spring.method.metadata.PreEnforce;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.experimental.StandardException;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequiredArgsConstructor
public class UIController {

    private static final String PATIENT = "patient";

    private static final String REDIRECT_PATIENTS = "redirect:/patients";

    private final ObjectMapper om;

    private final PolicyDecisionPoint pdp;

    private final PatientRepository patientRepository;

    @StandardException
    @ResponseStatus(value = HttpStatus.NOT_FOUND)
    public static class ResourceNotFoundException extends RuntimeException {
        private static final long serialVersionUID = -3700918290606460911L;
    }

    // @PreEnforce
    @GetMapping("/")
    public String home(Model model, Authentication authentication) {
        if (null != authentication) {
            model.addAttribute("user", authentication.getName());
        }
        return "home";
    }

    @PreEnforce
    @GetMapping("/patients")
    public String getPatients(HttpServletRequest request, Model model, Authentication authentication) {
        model.addAttribute("patients", patientRepository.findAll());
        model.addAttribute("permittedToUseCreatePatientButton",
                isPermitted(authentication, "use", "ui:view:patients:createPatientButton"));
        return "patients";
    }

    @PreEnforce
    @PostMapping("/patients")
    public String createPatient(@ModelAttribute(value = "newPatient") Patient patient) {
        if (null != patient.getId()) {
            throw new IllegalArgumentException("Patient has a predefined id. Should be autogenerated.");
        }
        patientRepository.save(patient);
        return REDIRECT_PATIENTS;
    }

    @PreEnforce
    @GetMapping("/patients/new")
    public String newPatient(Model model) {
        Patient patient = new Patient();
        model.addAttribute(PATIENT, patient);
        return "newPatient";
    }

    @PreEnforce
    @GetMapping("/patients/{id}")
    public String getPatient(@PathVariable Long id, Model model, Authentication authentication) throws IOException {
        Patient patient = patientRepository.findById(id).orElseThrow(ResourceNotFoundException::new);
        model.addAttribute(PATIENT, patient);
        model.addAttribute("permittedToUseUpdatePatientButton",
                isPermitted(authentication, "use", "ui:view:patient:updatePatientButton"));
        model.addAttribute("permittedToUseDeletePatientButton", isPermitted(authentication, "use",
                om.readTree("{ \"id\": " + id + ", \"uiElement\": \"ui:view:patient:deletePatientButton\"}")));
        return PATIENT;
    }

    @PreEnforce
    @DeleteMapping("/patients/{id}")
    public String deletePatient(@PathVariable Long id) {
        patientRepository.deleteById(id);
        return REDIRECT_PATIENTS;
    }

    @PreEnforce
    @GetMapping("/patients/{id}/update")
    public String updatePatient(@PathVariable Long id, Model model, Authentication authentication) {
        Patient patient = patientRepository.findById(id).orElseThrow(ResourceNotFoundException::new);
        model.addAttribute(PATIENT, patient);
        model.addAttribute("permittedToUpdateDiagnosis",
                isPermitted(authentication, "edit", "ui:view:patients:diagnosisField"));
        model.addAttribute("permittedToUpdateIcdClassification",
                isPermitted(authentication, "edit", "ui:view:patients:icd11Field"));
        model.addAttribute("permittedToUpdateAttendingDoctor",
                isPermitted(authentication, "edit", "ui:view:patients:doctorField"));
        model.addAttribute("permittedToUpdateAttendingNurse",
                isPermitted(authentication, "edit", "ui:view:patients:nurseField"));
        return "updatePatient";
    }

    @PreEnforce
    @PostMapping("/patients/{id}")
    public String updatePatient(@ModelAttribute(PATIENT) Patient patient, @PathVariable Long id) {
        log.info("Got patient: {}", patient);
        if (null != patient.getName()) {
            patientRepository.updateNameById(patient.getName(), id);
        }

        if (null != patient.getDiagnosisText()) {
            patientRepository.updateDiagnosisTextById(patient.getDiagnosisText(), id);
        }

        if (null != patient.getIcd11Code()) {
            patientRepository.updateIcd11CodeById(patient.getIcd11Code(), id);
        }

        if (null != patient.getPhoneNumber()) {
            patientRepository.updatePhoneNumberById(patient.getPhoneNumber(), id);
        }

        if (null != patient.getRoomNumber()) {
            patientRepository.updateRoomNumberById(patient.getRoomNumber(), id);
        }

        if (null != patient.getAttendingDoctor()) {
            patientRepository.updateAttendingDoctorById(patient.getAttendingDoctor(), id);
        }

        if (null != patient.getAttendingNurse()) {
            patientRepository.updateAttendingNurseById(patient.getAttendingNurse(), id);
        }

        return REDIRECT_PATIENTS + "/" + id;
    }

    private boolean isPermitted(Object subject, Object action, Object resource) {
        var permitted = pdp.decide(AuthorizationSubscription.of(subject, action, resource))
                .map(d -> d.getDecision() == Decision.PERMIT).blockFirst();
        if (null == permitted) {
            return false;
        }
        return permitted;
    }

}
