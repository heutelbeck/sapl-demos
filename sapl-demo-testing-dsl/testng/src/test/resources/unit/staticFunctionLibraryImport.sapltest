requirement "blacken from FunctionLibrary is applied" {
 	given
    	- policy "policyWithObligationAndResource" //this policy uses the FilterFunctionLibrary to blacken parts of the resource and puts them into an obligation
        - static-function-library "filter" //by using a static import (FunctionLibrary which requires no instance since all methods are static) we can refer to a specific registration in our io.sapl.demo.testing.dsl.junit.TestAdapter by name (e.g. Map.of(ImportType.STATIC_FUNCTION_LIBRARY, Map.of("filter", FilterFunctionLibrary.class)))

	scenario "willi with authority ROLE_ADMIN can execute action with java.name=findById on complex resource with obligation and transformed resource"
    //complex subject definition this time, setting name and required authority
    when
    {
    	"name": "willi",
        "authority": "ROLE_ADMIN"
    }
    //action definition contains a nested object under the key "java" with a property "name" being "findById"
    attempts
    {
    	"java": {
        	"name": "findById"
        }
    }
    on
    {
    	"id": 56,
        "diagnosisText": "diagnosisText",
        "icd11Code": "icd11Code"
    }
    //we expect a permit here and also want to verify the correct obligation and resource
    //since the blacken function of our imported FunctionLibrary is applied to the resource
    //check that is permit with obligation in normal JSON syntax
    expect permit with obligations
    {
    	//there needs to be a key with text value "logAccess"
    	"type": "logAccess",
        // we know the message
        "message": "willi has accessed patient data (id=56) as an administrator."
    }
    // define expected resource with blacken function applied
    with resource
    {
    	//here the blacken of our imported FunctionLibrary is applied
    	"diagnosisText": "█████████████",
        //here the blacken of our imported FunctionLibrary is applied
        "icd11Code": "ic███████",
        "id": 56
    };

    scenario "willi with authority ROLE_ADMIN can execute action with java.name=findById on complex resource with obligation and transformed resource non exact match"
    when
    {
    	"name": "willi",
        "authority": "ROLE_ADMIN"
    }
    attempts
    {
    	"java": {
        	"name": "findById"
        }
    }
    on
    {
    	"id": 56,
        "diagnosisText": "diagnosisText",
        "icd11Code": "icd11Code"
    }
    // in case you don't know the exact obligation (since some values like timestamps, ids are generated on server side) you can use a variety of matchers
    // see https://github.com/heutelbeck/sapl-policy-engine/blob/master/sapl-test/README.md#authorizationdecisionmatcher for all available matchers
    expect decision is permit,
    with obligation matching object where
    {
    	//there needs to be a key with text value "logAccess"
    	"type" is text "logAccess"
        and
        // simulate that we don't know the complete message only our subject name, patient data and administrator
        "message" is text containing stream "willi", "patient data", "administrator" in order
    },
    // define expected resource with blacken function applied
    with resource equals
    {
    	//here the blacken of our imported FunctionLibrary is applied
    	"diagnosisText": "█████████████",
        //here the blacken of our imported FunctionLibrary is applied
        "icd11Code": "ic███████",
        "id": 56
    };
}