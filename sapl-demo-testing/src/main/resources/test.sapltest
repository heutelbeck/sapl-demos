policySimple tests {
	scenario "test_simplePolicy"
	with environment { "key": "value", "key": "value"}
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;
}

policyWithSimpleFunction tests {
	scenario "test_policyWithSimpleFunction"
    given functionLibrary TemporalFunctionLibrary
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;

	scenario "test_policyWithSimpleMockedFunction"
    given function time.dayOfWeek returning "SATURDAY"
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;

	scenario "test_policyWithSimpleMockedFunction_VerifyTimesCalled"
    given function time.dayOfWeek returning "SATURDAY" and is invoked once
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;
}

policyWithSimplePIP tests {
	scenario "test_policyWithSimpleMockedPIP"
    given attribute test.upper returns "WILLI"
   when subject "willi" attempts action "read" on resource "something"
    then expect single permit;

	scenario "test_policyWithSimplePIP"
    given PIP abc
   when subject "willi" attempts action "read" on resource "something"
    then expect single permit;

    scenario "test_policyWithSimplePIP_mockedWhenParameters"
    given attribute test.upper with parent value "willi" returns "WILLI"
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;
}

policyWithMultipleFunctionsOrPIPs tests {
	scenario "test_policyWithMultipleMocks"
    given attribute test.upper returns "WILLI" and
    function time.dayOfWeekFrom returning "SATURDAY"
    when subject "willi" attempts action "read" on resource "something"
    then expect single permit;
}

policyStreaming tests {
	scenario "test_streamingPolicy"
    given attribute time.now returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    and functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect notApplicable 4 times
    then expect permit 2 times;

	scenario "test_streamingPolicy_TimingAttributeMock"
    given virtualTime and
    attribute time.now returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    for 1s
    and functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then wait 1s
    then expect notApplicable once
    then wait 1s
    then expect notApplicable once
    then wait 1s
    then expect notApplicable once
    then wait 1s
    then expect notApplicable once
    then wait 1s
    then expect permit once
    then wait 1s
    then expect permit once
    then wait 1s;

	scenario "test_streamingPolicy_TimingAttributeMock_WithoutVirtualTime"
    given
    attribute time.now returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    for 10s
    and functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect exception;

	scenario "test_streamingPolicyWithSimpleMockedFunction_ConsecutiveCalls"
    given virtualTime and
    attribute time.now returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z"
    and
    function time.secondOf returns 4 once and
    function time.secondOf returns 5 once and
    functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect notApplicable once
    then expect permit once;

	scenario "test_streamingPolicyWithSimpleMockedFunction_ArrayOfReturnValues"
    given attribute time.now returns
    "value",
    "doesn't",
    "matter"
    and
    function time.secondOf returns 3,4,5 once and
    functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect notApplicable 2 times
    then expect permit once;

	scenario "test_streamingPolicyWithSimpleMockedFunction_AlwaysReturn_VerifyTimesCalled"
    given attribute time.now returns
    "value",
    "doesn't",
    "matter"
    and
    function time.secondOf returning 5 and is invoked 3 times
    and
    functionLibrary TemporalFunctionLibrary
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect permit 3 times;
}

policyWithComplexFunction tests {
	scenario "test_streamingPolicyWithMockedFunction_ReturnValueDependingOnSimpleParameters_AndDynamicMockedAttribute"
    given attribute company.pip1 and
    attribute company.pip2 and
    function company.complexFunction called with 1, "foo" returning true and
    function company.complexFunction called with 2, any returning true and
    function company.complexFunction called with any, any returning false
    when subject "User1" attempts action "read" on resource "heartBeatData"
    then let company.pip1 return 1
    then let company.pip2 return "foo"
    then expect permit once
    then let company.pip2 return "bar"
    then expect notApplicable once
    then let company.pip1 return 2
    then expect permit once
    then let company.pip2 return "xxx"
    then expect permit once
    then let company.pip1 return 3
    then expect notApplicable once;
}

policyDocumentWithMultipleCallsToSameAttribute tests {
	scenario "test_withFunctionSequenceMock"
    given attribute time.now returns 1,2,3,4,5,6 and
    function time.secondOf returns 1,15,25,25,35,35,45,45,45,55,55,55 once
    when subject "WILLI" attempts action "read" on resource "something"
    then expect decision is permit, with obligation equals "A"
    then expect decision is permit, with obligation equals "A"
    then expect decision is permit, with obligation equals "B"
    then expect decision is permit, with obligation equals "B"
    then expect decision is permit, with obligation equals "C"
    then expect decision is permit, with obligation equals "C";

	scenario "test_withFunctionForParametersMock"
    given attribute time.now returns 1,2,3,4,5,6 and
    function time.secondOf called with 1 returning 1 and
    function time.secondOf called with 2 returning 15 and
    function time.secondOf called with 3 returning 25 and
    function time.secondOf called with 4 returning 35 and
    function time.secondOf called with 5 returning 45 and
    function time.secondOf called with 6 returning 55
    when subject "WILLI" attempts action "read" on resource "something"
    then expect decision is permit, with obligation equals "A"
    then expect decision is permit, with obligation equals "A"
    then expect decision is permit, with obligation equals "B"
    then expect decision is permit, with obligation equals "B"
    then expect decision is permit, with obligation equals "C"
    then expect decision is permit, with obligation equals "C";
}

policyWithComplexPIP tests {
	scenario "test_policyWithSimpleMockedPIP"
    given
    attribute pip.attribute1 and
    attribute pip.attribute2 and
    attribute pip.attributeWithParams with parent value true and parameters 2,2 returns true and
    attribute pip.attributeWithParams with parent value true and parameters 2,1 returns false and
    attribute pip.attributeWithParams with parent value true and parameters 1,2 returns false
    when subject "WILLI" attempts action "read" on resource "something"
    then let pip.attribute1 return 1
    then let pip.attribute2 return 2
    then expect notApplicable once
    then let pip.attribute1 return 2
    then expect permit once
    then let pip.attribute2 return 1
	then expect notApplicable once;
}

policyWithObligationAndResource tests {
	scenario "test_equals"
	given functionLibrary FilterFunctionLibrary
    when
    subject {"name": "Willi", "authority": "ROLE_ADMIN"}
    attempts
    action {"java": {"name": "findById"}}
    on
    resource {"id": "56", "diagnosisText": "█████████████", "icd11Code": "ic███████"}
    then expect single permit
    with obligations
    {"type": "logAccess", "message": "Willi has accessed patient data (id=56) as an administrator."}
    with resource
    {"id": "56", "diagnosisText": "█████████████", "icd11Code": "ic███████"};
}

using policies "policiesIT/policy_A","policiesIT/policy_B","policiesIT/policy_C" integration tests
    using combiningAlgorithm deny-unless-permit
    {
	scenario "test_simpleIT_verifyCombined"
    when subject "WILLI" attempts action "read" on resource "foo"
    then expect single permit;

    scenario "test"
    given functionLibrary TemporalFunctionLibrary
    and
    virtualTime
    and
    attribute time.now returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    for 1s
    when subject "WILLI" attempts action "read" on resource "bar"
    then wait 10s
    then expect deny once
    then expect permit once
    then no event for 2s;

    scenario "test_mockedFunctionAndAttribute_ArrayOfReturnValues"
    given attribute time.now returns "value", "doesn't", "matter"
    and
    function time.secondOf returns 3, 4 once
    when subject "WILLI" attempts action "read" on resource "bar"
    then expect deny once
    then expect permit once;
}