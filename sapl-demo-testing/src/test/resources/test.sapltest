test "policySimple" {
	scenario "test_simplePolicy"
	with environment { "key": "value", "key": "value"}
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;
}

test "policyWithSimpleFunction" {
	scenario "test_policyWithSimpleFunction"
    register
    	- library TemporalFunctionLibrary
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;

	scenario "test_policyWithSimpleMockedFunction"
    given
    	- function "time.dayOfWeek" returns "SATURDAY"
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;

	scenario "test_policyWithSimpleMockedFunction_VerifyTimesCalled"
    given
    	- function "time.dayOfWeek" returns "SATURDAY" called once
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;
}

test "policyWithSimplePIP" {
	scenario "test_policyWithSimpleMockedPIP"
    given
    	- attribute "test.upper" returns "WILLI"
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;

	scenario "test_policyWithSimplePIP"
    register
    	- PIP "io.sapl.test.TestPIP"
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;

    scenario "test_policyWithSimplePIP_mockedWhenParameters"
    given
    	- attribute "test.upper" with parent value "willi" returns "WILLI"
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;
}

test "policyWithMultipleFunctionsOrPIPs" {
	scenario "test_policyWithMultipleMocks"
    given
    	- attribute "test.upper" returns "WILLI"
    	- function "time.dayOfWeekFrom" returns "SATURDAY"
    when subject "willi" attempts action "read" on resource "something"
    then expect permit;
}

test "policyStreaming" {
	scenario "test_streamingPolicy"
    register
    	- library TemporalFunctionLibrary
    given
    	- attribute "time.now" returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect
    	- notApplicable 4x
        - permit 2x;

	scenario "test_streamingPolicy_TimingAttributeMock"
    register
    	- library TemporalFunctionLibrary
    given
    	- virtual-time
        - attribute "time.now" returns
    "2021-02-08T16:16:01.000Z",
    "2021-02-08T16:16:02.000Z",
    "2021-02-08T16:16:03.000Z",
    "2021-02-08T16:16:04.000Z",
    "2021-02-08T16:16:05.000Z",
    "2021-02-08T16:16:06.000Z"
    with timing "PT1S"
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect
    	- wait "PT1S"
        - notApplicable once
     	- wait "PT1S"
    	- notApplicable once
        - wait "PT1S"
    	- notApplicable once
      	- wait "PT1S"
        - notApplicable once
        - wait "PT1S"
      	- permit once
      	- wait "PT1S"
     	- permit once
        - wait "PT1S";

	scenario "test_streamingPolicy_TimingAttributeMock_WithoutVirtualTime"
    register
    	- library TemporalFunctionLibrary
    given
    	- attribute "time.now" returns
          "2021-02-08T16:16:01.000Z",
          "2021-02-08T16:16:02.000Z",
          "2021-02-08T16:16:03.000Z",
          "2021-02-08T16:16:04.000Z",
          "2021-02-08T16:16:05.000Z",
          "2021-02-08T16:16:06.000Z"
          with timing "PT10S"
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect exception;

	scenario "test_streamingPolicyWithSimpleMockedFunction_ConsecutiveCalls"
    register
    	- library TemporalFunctionLibrary
    given
    	- virtual-time
    	- attribute "time.now" returns "2021-02-08T16:16:01.000Z", "2021-02-08T16:16:02.000Z"
  		- function "time.secondOf" returns stream 4
        - function "time.secondOf" returns stream 5
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect
    	- notApplicable once
        - permit once;

	scenario "test_streamingPolicyWithSimpleMockedFunction_ArrayOfReturnValues"
    register
    	- library TemporalFunctionLibrary
    given
    	- attribute "time.now" returns
          "value",
          "doesn't",
          "matter"
    	- function "time.secondOf" returns stream 3, 4, 5
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect
    	- notApplicable 2x
        - permit once;

	scenario "test_streamingPolicyWithSimpleMockedFunction_AlwaysReturn_VerifyTimesCalled"
    register
    	- library TemporalFunctionLibrary
    given
    	- attribute "time.now" returns
          "value",
          "doesn't",
          "matter"
    	- function "time.secondOf" returns 5 called 3x
    when subject "ROLE_DOCTOR" attempts action "read" on resource "heartBeatData"
    then expect
    	- permit 3x;
}

test "policyWithComplexFunction" {
	scenario "test_streamingPolicyWithMockedFunction_ReturnValueDependingOnSimpleParameters_AndDynamicMockedAttribute"
    given
    	- attribute "company.pip1"
    	- attribute "company.pip2"
    	- function "company.complexFunction" parameters matching 1, "foo" returns true
    	- function "company.complexFunction" parameters matching 2, any returns true
    	- function "company.complexFunction" parameters matching any, any returns false
    when subject "User1" attempts action "read" on resource "heartBeatData"
    then expect
    	- let "company.pip1" return 1
      	- let "company.pip2" return "foo"
     	- permit once
      	- let "company.pip2" return "bar"
      	- notApplicable once
      	- let "company.pip1" return 2
    	- permit once
      	- let "company.pip2" return "xxx"
      	- permit once
    	- let "company.pip1" return 3
      	- notApplicable once;
}

test "policyDocumentWithMultipleCallsToSameAttribute" {
	scenario "test_withFunctionSequenceMock"
    given
    	- attribute "time.now" returns 1, 2, 3, 4, 5, 6
    	- function "time.secondOf" returns stream 1, 15, 25, 25, 35, 35, 45, 45, 45, 55, 55, 55
    when subject "WILLI" attempts action "read" on resource "something"
    then expect
    	- decision is permit, with obligation equals "A"
    	- decision is permit, with obligation equals "A"
      	- decision is permit, with obligation equals "B"
      	- decision is permit, with obligation equals "B"
      	- decision is permit, with obligation equals "C"
    	- decision is permit, with obligation equals "C";

	scenario "test_withFunctionForParametersMock"
    given
    	- attribute "time.now" returns 1, 2, 3, 4, 5, 6
    	- function "time.secondOf" parameters matching 1 returns 1
    	- function "time.secondOf" parameters matching 2 returns 15
    	- function "time.secondOf" parameters matching 3 returns 25
    	- function "time.secondOf" parameters matching 4 returns 35
    	- function "time.secondOf" parameters matching 5 returns 45
    	- function "time.secondOf" parameters matching 6 returns 55
    when subject "WILLI" attempts action "read" on resource "something"
    then expect
    	- decision is permit, with obligation equals "A"
    	- decision is permit, with obligation equals "A"
    	- decision is permit, with obligation equals "B"
    	- decision is permit, with obligation equals "B"
    	- decision is permit, with obligation equals "C"
      	- decision is permit, with obligation equals "C";
}

test "policyWithComplexPIP" {
	scenario "test_policyWithSimpleMockedPIP"
    given
    	- attribute "pip.attribute1"
    	- attribute "pip.attribute2"
    	- attribute "pip.attributeWithParams" with parent value true and parameters 2, 2 returns true
    	- attribute "pip.attributeWithParams" with parent value true and parameters 2, 1 returns false
    	- attribute "pip.attributeWithParams" with parent value true and parameters 1, 2 returns false
    when subject "WILLI" attempts action "read" on resource "something"
    then expect
    	- let "pip.attribute1" return 1
    	- let "pip.attribute2" return 2
    	- notApplicable once
    	- let "pip.attribute1" return 2
    	- permit once
    	- let "pip.attribute2" return 1
		- notApplicable once;
}

test "policyWithObligationAndResource" {
	scenario "test_equals"
	register
    	 - library FilterFunctionLibrary
    when
    subject {"name": "Willi", "authority": "ROLE_ADMIN"}
    attempts
    action {"java": {"name": "findById"}}
    on
    resource {"id": "56", "diagnosisText": "█████████████", "icd11Code": "ic███████"}
    then expect permit
    with obligations
    {"type": "logAccess", "message": "Willi has accessed patient data (id=56) as an administrator."}
    with resource
    {"id": "56", "diagnosisText": "█████████████", "icd11Code": "ic███████"};
}

test policies
	- "policiesIT/policy_A"
    - "policiesIT/policy_B"
    - "policiesIT/policy_C"
    using combining-algorithm deny-unless-permit {
	scenario "test_simpleIT_verifyCombined"
    when subject "WILLI" attempts action "read" on resource "foo"
    then expect permit;

    scenario "test"
    register
    	- library TemporalFunctionLibrary
    given
    	- virtual-time
    	- attribute "time.now" returns
          "2021-02-08T16:16:01.000Z",
          "2021-02-08T16:16:02.000Z",
          "2021-02-08T16:16:03.000Z",
          "2021-02-08T16:16:04.000Z",
          "2021-02-08T16:16:05.000Z",
          "2021-02-08T16:16:06.000Z"
    with timing "PT1S"
    when subject "WILLI" attempts action "read" on resource "bar"
    then expect
    	- wait "PT10S"
        - deny once
     	- permit once
    	- no-event for "PT2S";

    scenario "test_mockedFunctionAndAttribute_ArrayOfReturnValues"
    given
    	- attribute "time.now" returns "value", "doesn't", "matter"
    	- function "time.secondOf" returns stream 3, 4
    when subject "WILLI" attempts action "read" on resource "bar"
    then expect
    	- deny once
      	- permit once;
}

test policies with identifier "policiesIT" {
    scenario "test_simpleIT_verifyCombined"
    when subject "WILLI" attempts action "read" on resource "foo"
    then expect permit;
}